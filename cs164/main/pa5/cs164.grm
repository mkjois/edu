%ignore          /[ \t\v\f\r]+/
%ignore          /\\\n/
%ignore          /#.*/
//what else might we want to ignore here?

%left  '||'
%left '&&'
%left '<=' '<' '>=' '>'
%left '==' '!='
%left '+' '-'
%left '*' '/'
%left 'in'
%left '.'
//what else needs associativity declarations?

%%

//a couple sample lines below.  you might or might not want to use them

P      ->   S                        %{ return [n1.val] %}
        |   P ';' S                  %{ return n1.val.concat(n3.val) %}
        |   P /\n/ S                 %{ return n1.val.concat(n3.val) %}
        |   P /\n/                   %{ return n1.val %}
        |   P ';'                    %{ return n1.val %}
        |   _                        %{ return [] %}
        ;
S      ->   E                        %{ return {'body':n1.val, 'type':'exp'} %}
        |   Id '=' E                 %{ return {'type':'asgn', 'name':n1.val, 'value':n3.val} %}
        |   'def' Id '=' E           %{ return {'type':'def', 'name':n2.val, 'value':n4.val} %}
        |   'def' Id '(' I ')' '{' P '}' %{ return {'type':'def', 'name':n2.val, 'value':{'body':n7.val, 'type':'lambda', 'arguments':n4.val}} %}
        |   E '[' E ']' '=' E        %{ return {'dict':n1.val, 'type':'put', 'value':n6.val, 'field':n3.val} %}
        |   E '.' Id '=' E           %{ return {'dict':n1.val, 'type':'put', 'value':n5.val, 'field':{'type':'string-lit', 'value':n3.val.name}} %}
        |   'print' E                %{ return {'type':'print', 'value':n2.val} %}
        |   'error' E                %{ return {'type':'error', 'message':n2.val} %}
        |   'if' '(' E ')' '{' P '}' 'else' '{' P '}' %{ return {'true':n6.val, 'false':n10.val, 'type':'if', 'condition':n3.val} %}
        |   'if' '(' E ')' '{' P '}' %{ return {'true':n6.val, 'false':[], 'type':'if', 'condition':n3.val} %}
        |   'while' '(' E ')' '{' P '}' %{ return {'type':'while', 'condition':n3.val, 'body':n6.val} %}
        |   'for' '(' Id 'in' E ')' '{' P '}' %{ return {'body':n8.val, 'type':'for', 'name':n3.val, 'iterable':n5.val} %}
        ;
E   ->  'null'            	     			%dprec 0 %{ return {'type':'null'} %}
        |   Num               				%dprec 1 %{ return {'type':'int-lit'   , 'value':n1.val} %}
        |   String            				%dprec 1 %{ return n1.val %}
        |   Id                				%dprec 1 %{ return n1.val %}
        |   '{' T '}'         				%dprec 1 %{ return n2.val %}
        |   '(' E ')'         				%dprec 1 %{ return n2.val %}
        |   E '+' E                         %dprec 2 %{ return {'operand1':n1.val, 'type':'+', 'operand2':n3.val} %}
        |   E '-' E                         %dprec 2 %{ return {'operand1':n1.val, 'type':'-', 'operand2':n3.val} %}
        |   E '*' E                         %dprec 2 %{ return {'operand1':n1.val, 'type':'*', 'operand2':n3.val} %}
        |   E '/' E                         %dprec 2 %{ return {'operand1':n1.val, 'type':'/', 'operand2':n3.val} %}
        |   E '==' E                        %dprec 2 %{ return {'operand1':n1.val, 'type':'==', 'operand2':n3.val} %}
        |   E '!=' E                        %dprec 2 %{ return {'operand1':n1.val, 'type':'!=', 'operand2':n3.val} %}
        |   E '<' E                         %dprec 2 %{ return {'operand1':n1.val, 'type':'<', 'operand2':n3.val} %}
        |   E '>' E                         %dprec 2 %{ return {'operand1':n1.val, 'type':'>', 'operand2':n3.val} %}
        |   E '<=' E                        %dprec 2 %{ return {'operand1':n1.val, 'type':'<=', 'operand2':n3.val} %}
        |   E '>=' E                        %dprec 2 %{ return {'operand1':n1.val, 'type':'>=', 'operand2':n3.val} %}
        |   E '&&' E                        %dprec 2 %{ return {'operand1':n1.val, 'type':'&&', 'operand2':n3.val} %}
        |   E '||' E                        %dprec 2 %{ return {'operand1':n1.val, 'type':'||', 'operand2':n3.val} %}
        |   E 'in' E                        %dprec 2 %{ return {'operand1':n1.val, 'type':'in', 'operand2':n3.val} %}
        |   E '[' E ']'                     %dprec 1 %{ return {'dict':n1.val, 'type':'get', 'field':n3.val} %}
        |   E '.' Id                        %dprec 1 %{ return {'dict':n1.val, 'type':'get', 'field':{'type':'string-lit', 'value':n3.val.name}} %}
        |   'len' '(' E ')'                 %dprec 3 %{ return {'dict':n3.val, 'type':'len'} %}
        |   '[' E 'for' Id 'in' E ']'       %dprec 1 %{ return {'expression': n2.val, 'type': 'comprehension', 'name': n4.val, 'iterable': n6.val} %}
        |   'lambda' '(' I ')' '{' P '}'    %dprec 1 %{ return {'body':n6.val, 'type':'lambda', 'arguments':n3.val} %}
        |   E '(' V ')'                     %dprec 1 %{ return {'function':n1.val, 'type':'call', 'arguments':n3.val} %}
        |   E ':' Id '(' V ')'              %dprec 1 %{ return {'obj': n1.val, 'args': n5.val, 'type': 'mcall', 'mname': n3.val} %}
        |   'ite' '(' E ',' E ',' E ')'     %dprec 3 %{ return {'type':'ite', 'condition':n3.val, 'true':n5.val, 'false':n7.val} %}
        |   'coroutine' '(' E ')'           %dprec 3 %{ return {'type':'coroutine', 'body':n3.val} %}
        |   'resume' '(' E ',' E ')'        %dprec 3 %{ return {'type':'resume',    'coroutine':n3.val, 'arg':n5.val} %}
        |   'yield' '(' E ')'               %dprec 3 %{ return {'type':'yield',     'arg':n3.val} %}
        ;

V      ->   _                               %{ return [] %}
        |   E                               %{ return [n1.val] %}
        |   V ',' E                         %{ return n1.val.concat(n3.val) %}
        ;

I      ->   Id                       		%{ return [n1.val] %}
        |   I ',' Id                 		%{ return n1.val.concat(n3.val) %}
        |   _                               %{ return [] %}
        ;


T       ->  _                           %{ return {'type':'dict-lit', 'value':[]} %}
        |   Id '=' E                    %{ return {'type':'dict-lit', 'value':[{'name':n1.val.name, 'value':n3.val}]} %}
        |   T ',' Id '=' E              %{ return {'type':'dict-lit', 'value':n1.val.value.concat({'name':n3.val.name, 'value':n5.val})} %}
        ;

Num -> /[0-9]+/                         %{ return parseInt(n1.val) %}
	;

Id -> /[a-zA-Z_][a-zA-Z_0-9]*/          %{ return {'type':'id', 'name':n1.val} %}
	;

String -> /"[^"]*"|'[^']*'/ 	        %{ return {'type':'string-lit', 'value':n1.val.substring(1, n1.val.length - 1)} %}
	;
